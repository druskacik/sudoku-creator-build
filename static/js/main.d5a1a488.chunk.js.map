{"version":3,"sources":["components/Navbar/index.js","components/Sudoku/helpers/render/render-table.js","components/Sudoku/helpers/render/render-puzzle.js","components/Sudoku/helpers/create-sudoku/index.js","config/index.js","components/Sudoku/index.js","components/Database/index.js","components/About/index.js","components/SudokuList/index.js","store/actions/index.js","App.js","serviceWorker.js","store/reducers/index.js","store/index.js","index.js"],"names":["Navbar","className","to","renderSudoku","span","grid","renderThreeRows","i","rows","renderRow","j","elems","k","push","key","id","renderGrid","renderPuzzle","puzzle","creationTime","numberOfClues","cell","document","getElementById","Boolean","innerText","bigMatrix","a","Array","fill","Math","floor","select","x","y","r","cols","forEach","c","indexOf","splice","deselect","reverse","pop","solve","solution","firstTime","riesenia","length","Object","keys","reduce","b","exact_cover","e","rewriteToObject","matrix","s","rewriteToGrid","sol","u","Number","pushClues","numOfClues","remainingRows","random","m","l","d","createPuzzle","X","Y","S","R","solutions","remRows","JSON","parse","stringify","slice","createSudoku","t0","Date","now","t1","configuration","apiUrl","Sudoku","handleSudoku","fetch","config","method","headers","Headers","Accept","body","renderTable","onClick","Database","About","SudokuList","this","props","readSudokus","sudokus","puzzles","sudoku","renderPuzzles","Component","connect","state","dispatch","then","res","json","type","data","catch","err","console","log","App","path","exact","component","window","location","hostname","match","combineReducers","action","store","createStore","reducer","applyMiddleware","thunkMiddleware","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAgBeA,G,MAZA,WACX,OACI,6BACI,wBAAIC,UAAU,QACV,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,aACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,c,gCCqCLC,G,MAnBM,WACjB,OACI,6BACI,+BACI,kCACI,yBAAKC,KAAK,OAEd,kCACI,yBAAKA,KAAK,OAEd,kCACI,yBAAKA,KAAK,OArCX,WAgBf,IAfA,IAAMC,EAAO,GACPC,EAAkB,SAACC,GASrB,IARA,IAAMC,EAAO,GACPC,EAAY,SAACF,EAAGG,GAElB,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACxBD,EAAME,KAAK,wBAAIC,IAAG,UAAK,EAAEP,EAAIG,GAAX,OAAeE,GAAKG,GAAE,UAAK,EAAER,EAAIG,GAAX,OAAeE,MAE3D,OAAOD,GAEFD,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACxBF,EAAKK,KAAK,wBAAIC,IAAG,UAAK,EAAEP,EAAIG,EAAX,QAAoBD,EAAUF,EAAGG,KAEtD,OAAOF,GAEFD,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACxBF,EAAKQ,KACD,2BAAOC,IAAG,UAAKP,EAAL,cACLD,EAAgBC,KAI7B,OAAOF,EAgBMW,OCtBFC,EAnBM,SAACC,EAAQC,GAE1B,IADA,IAAIC,EAAgB,EACXb,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACxB,IAAK,IAAIG,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC3B,IAAMW,EAAOC,SAASC,eAAT,UAA2BhB,GAA3B,OAA+BG,IACxCc,QAAQN,EAAOX,GAAGG,KAClBW,EAAKI,UAAYP,EAAOX,GAAGG,GAC3BU,GAAiB,GAEjBC,EAAKI,UAAY,GAITH,SAASC,eAAe,gBAChCE,UAAZ,yBAA0CN,EAA1C,OAC6BG,SAASC,eAAe,iBAChCE,UAArB,2BAAqDL,I,QCNnDM,EAAY,WAEd,IADA,IAAIC,EAAI,GACCpB,EAAI,EAAGA,EAAI,IAAKA,IACrBoB,EAAEpB,GAAK,IAAIqB,MAAM,KAAKC,KAAK,GAC3BF,EAAEpB,GAAGuB,KAAKC,MAAMxB,EAAE,IAAM,EACxBoB,EAAEpB,GAAG,GAAK,EAAGuB,KAAKC,MAAMxB,EAAE,IAAOA,EAAE,GAAK,EACxCoB,EAAEpB,GAAG,IAAMA,EAAE,IAAM,EACnBoB,EAAEpB,GAAG,IAAMA,EAAE,EAAI,EAAEuB,KAAKC,MAAOxB,EAAE,GAAI,IAAM,GAAGuB,KAAKC,MAAMxB,EAAE,MAAQ,EAEvE,OAAOoB,GAGLK,EAAS,SAACC,EAAGC,EAAGC,GAClB,IAAIC,EAAO,GAeX,OAdAF,EAAEC,GAAGE,SAAQ,SAAA9B,GACT0B,EAAE1B,GAAG8B,SAAQ,SAAA3B,GACTwB,EAAExB,GAAG2B,SAAQ,SAAAzB,GACT,GAAIA,GAAKL,EAAG,CACR,IAAI+B,EAAIL,EAAErB,GAAG2B,QAAQ7B,GACjB4B,GAAK,GACLL,EAAErB,GAAG4B,OAAOF,EAAG,UAK/BF,EAAKvB,KAAKoB,EAAE1B,WACL0B,EAAE1B,MAEN6B,GAGLK,EAAW,SAACR,EAAGC,EAAGC,EAAGC,GACvBF,EAAEC,GAAGO,UAAUL,SAAQ,SAAA9B,GACnB0B,EAAE1B,GAAK6B,EAAKO,MACZV,EAAE1B,GAAG8B,SAAQ,SAAA3B,GACTwB,EAAExB,GAAG2B,SAAQ,SAAAzB,GACLA,IAAML,GACN0B,EAAErB,GAAGC,KAAKH,YAK1BwB,EAAEC,GAAGO,WAGHE,EAAQ,SAARA,EAASX,EAAGC,GAAoC,IAAjCW,EAAgC,uDAAvB,GAAIC,IAAmB,yDACjD,GAAIA,EAGA,OAFAF,EAAMG,SAAW,GACjBH,EAAMX,EAAGC,EAAGW,GAAU,GACfD,EAAMG,SAEjB,KAAIH,EAAMG,SAASC,OAAS,GAG5B,GAA6B,IAA1BC,OAAOC,KAAKjB,GAAGe,OAAc,CAE5B,IADA,IAAIrB,EAAI,GACCpB,EAAI,EAAGA,EAAIsC,EAASG,OAAQzC,IACjCoB,EAAEd,KAAKgC,EAAStC,IAEpBqC,EAAMG,SAASlC,KAAKc,OAEjB,CACH,IAAIW,EAAIW,OAAOC,KAAKjB,GAAGkB,QAAO,SAACxB,EAAGyB,GAAJ,OAAUnB,EAAEN,GAAGqB,OAASf,EAAEmB,GAAGJ,OAASI,EAAIzB,KACxEM,EAAEK,GAAGD,SAAQ,SAAAF,GACTU,EAAShC,KAAKsB,GACd,IAAIC,EAAOJ,EAAOC,EAAGC,EAAGC,GACxBS,EAAMX,EAAGC,EAAGW,GAAU,GACtBJ,EAASR,EAAGC,EAAGC,EAAGC,GAClBS,EAASF,WAKfU,EAAc,SAACpB,EAAGC,GACpB,IAAIkB,EAAI,GACRnB,EAAEI,SAAQ,SAAAiB,GAAC,OAAIF,EAAEE,GAAK,MAFI,eAGjB1C,GACLsB,EAAEtB,GAAGyB,SAAQ,SAAA3B,GACT0C,EAAE1C,GAAGG,KAAKD,OAFlB,IAAK,IAAIA,KAAKsB,EAAI,EAATtB,GAKT,MAAO,CAACwC,EAAGlB,IAGTqB,EAAkB,SAACC,GAIrB,IAHA,IAAMrB,EAAIqB,EAAOR,OACXS,EAAID,EAAO,GAAGR,OAChBd,EAAI,GACC3B,EAAI,EAAGA,EAAI4B,EAAG5B,IAAK,CACxB2B,EAAE3B,GAAK,GACP,IAAK,IAAIG,EAAI,EAAGA,EAAI+C,EAAG/C,IACE,IAAjB8C,EAAOjD,GAAGG,IACVwB,EAAE3B,GAAGM,KAAKH,GAItB,OAAOwB,GA8BLwB,EAAgB,SAACC,GAEnB,IADA,IAAIhC,EAAI,GACCpB,EAAI,EAAGA,EAAI,EAAGA,IACnBoB,EAAEpB,GAAK,IAAIqB,MAAM,GAAGC,KAAK,GAE7B,IAAK,IAAInB,EAAI,EAAGA,EAAIiD,EAAIX,OAAQtC,IAAK,CACjC,IAAIkD,EAAIC,OAAOF,EAAIjD,IACnBiB,EAAEG,KAAKC,MAAMD,KAAKC,MAAM6B,EAAE,GAAG,IAAI9B,KAAKC,MAAM6B,EAAE,GAAG,GAAKA,EAAE,EAAI,EAEhE,OAAOjC,GAGLmC,EAAY,SAACC,EAAYpC,EAAGyB,GAC9B,IAD4F,IAA3DP,EAA0D,uDAA/C,GAAImB,EAA2C,mEAAvBpC,MAAM,KAAKsB,QACtE3C,EAAI,EAAGA,EAAIwD,EAAYxD,IAAK,CACjC,IAAI+B,EAAIR,KAAKC,MAAMD,KAAKmC,SAAWD,EAAchB,QAC7CkB,EAAIF,EAAc1B,GACtBO,EAAShC,KAAKqD,GACdF,EAAcxB,OAAOF,EAAG,GACxBc,EAAEc,GAAG7B,SAAQ,SAAA3B,GACTiB,EAAEjB,GAAG2B,SAAQ,SAAAzB,GACTwC,EAAExC,GAAGyB,SAAQ,SAAA8B,GACT,GAAIA,GAAKzD,EAAG,CACR,IAAI0D,EAAIzC,EAAEwC,GAAG5B,QAAQ3B,GACjBwD,GAAK,GACLzC,EAAEwC,GAAG3B,OAAO4B,EAAG,IAEnBA,EAAIJ,EAAczB,QAAQsB,OAAOjD,MACxB,GACLoD,EAAcxB,OAAO4B,EAAG,iBAKjCzC,EAAEjB,MAGjB,MAAO,CAACiB,EAAGyB,EAAGP,EAAUmB,IAGtBK,EAAe,WACjB,IAMIC,EAAGC,EAAGC,EAAGC,EANTC,EAAY,GACZC,EAAO,YAAO/C,MAAM,KAAKsB,QACzBS,EAAM,GACN1B,EAAC,YAAOL,MAAM,KAAKsB,QACnBhB,EAAIqB,EAAgB7B,KALD,EAMd2B,EAAYpB,EAAGC,GAND,mBAQvB,IAFCD,EANsB,KAMnBC,EANmB,KAQK,IAArBwC,EAAU1B,QAAc,CAC3B,GAAI0B,EAAU1B,OAAS,GAAoB,IAAfW,EAAIX,OAAc,CAC1C,IAAIV,OAAC,EACL,OAAOR,KAAKC,MAAM4B,EAAIX,OAAS,IAC3B,KAAK,EAAGV,EAAI,EAAG,MACf,KAAK,EAAGA,EAAI,EAAG,MACf,KAAK,EAAGA,EAAI,EAAG,MACf,QAASA,EAAI,EAEjBgC,EAAIM,KAAKC,MAAMD,KAAKE,UAAU7C,IAC9BsC,EAAIK,KAAKC,MAAMD,KAAKE,UAAU5C,IAC9BsC,EAAIb,EAAIoB,QACRN,EAAIE,EAAQI,QAX8B,MAYnBjB,EAAUxB,EAAGL,EAAGC,EAAGyB,EAAKgB,GAZL,mBAYzC1C,EAZyC,KAYtCC,EAZsC,KAYnCyB,EAZmC,KAY9BgB,EAZ8B,SAavC,CACH1C,EAAI2C,KAAKC,MAAMD,KAAKE,UAAUR,IAC9BpC,EAAI0C,KAAKC,MAAMD,KAAKE,UAAUP,IAC9BZ,EAAMa,EAAEO,QACRJ,EAAUF,EAAEM,QAJT,MAKoBjB,EAAU,EAAG7B,EAAGC,EAAGyB,EAAKgB,GAL5C,mBAKF1C,EALE,KAKCC,EALD,KAKIyB,EALJ,KAKSgB,EALT,KAOPD,EAAY9B,EAAMX,EAAGC,EAAGyB,GAE5B,MAAO,CAAC1B,EAAGC,EAAGyB,IAkCHqB,EA9OM,WACjB,IAAIC,EAAKC,KAAKC,MADS,EAELd,IAFK,mBAEZV,GAFY,gBAGnByB,EAAKF,KAAKC,MAEd,MAAO,CADMzB,EAAcC,GACXyB,EAAKH,ICHVI,EAJO,CAClBC,OAA2E,8CCsChEC,EAhCA,WACX,IAAMC,EAAY,uCAAG,kCAAA7D,EAAA,wDACcqD,IADd,mBACV9D,EADU,KACFC,EADE,KAEjBF,EAAaC,EAAQC,GACrBsE,MAAM,GAAD,OAAIC,EAAOJ,OAAX,gBAAiC,CAClCK,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CACjB,eAAgB,mBAChBC,OAAQ,qBAEZC,KAAMnB,KAAKE,UAAU,CACjB5D,SACAC,mBAXS,2CAAH,qDAelB,OACI,6BACK6E,IACD,4BAAQC,QAAST,GAAjB,UAGA,uBAAGzE,GAAG,gBAAN,kBAGA,uBAAGA,GAAG,iBAAN,sBCtBGmF,EARE,WACb,OACI,qECMOC,EARD,WACV,OACI,yD,QCAFC,E,4LAGEC,KAAKC,MAAMC,gB,oCAGDC,GACV,IAAMC,EAAU,GADG,uBAEnB,IAAI,IAAJ,IAAkBD,EAAlB,+CAA2B,CAAC,IAApBE,EAAmB,QACvBD,EAAQ5F,KACJ,uBAAGC,IAAK4F,EAAO3F,IAAK2F,EAAOxF,UAJhB,kFAOnB,OAAOuF,I,+BAIP,OACI,2CAEKJ,KAAKM,cAAcN,KAAKC,MAAME,c,GApBtBI,aAkCVC,eARS,SAAAC,GAAK,MAAK,CAC9BN,QAASM,EAAMN,YAGQ,SAAAO,GAAQ,MAAK,CACpCR,YAAa,kBAAMQ,GChCZ,SAACA,GACJtB,MAAM,GAAD,OAAIC,EAAOJ,OAAX,iBAAkC,CACnCK,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACjB,eAAgB,mBAChBC,OAAQ,uBAGXkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACFH,EAAS,CACLI,KAAM,eACNC,KAAMF,OAGbG,OAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZP,EAAS,CACLI,KAAM,iCDiBXN,CAGbT,GEhBaqB,E,iLAdX,OACE,kBAAC,IAAD,KACE,yBAAKxH,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOyH,KAAK,IAAIC,OAAK,EAACC,UAAWrC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,SAASE,UAAWzB,IAChC,kBAAC,IAAD,CAAOuB,KAAK,YAAYE,UAAW1B,IACnC,kBAAC,IAAD,CAAOwB,KAAK,QAAQE,UAAWxB,U,GATvBQ,aCGEpF,QACW,cAA7BqG,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCTSC,cAAgB,CAC3BzB,QARY,WAAuB,IAAtBM,EAAqB,uDAAf,GAAIoB,EAAW,uCAClC,MAAoB,iBAAhBA,EAAOf,KACAe,EAAOd,KAAOc,EAAOd,KAAKZ,QAAU,GAExCM,KCKIqB,EAPDC,YACVC,EACAC,YACIC,MCCRC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJ7G,SAASC,eAAe,SHqHtB,kBAAmBmH,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.d5a1a488.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div>\r\n            <ul className=\"menu\">\r\n                <li><Link to='/'>Home</Link></li>\r\n                <li><Link to='/database'>Database</Link></li>\r\n                <li><Link to='/about'>About</Link></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst renderGrid = () => {\r\n    const grid = [];\r\n    const renderThreeRows = (i) => {\r\n        const rows = [];\r\n        const renderRow = (i, j) => {\r\n            const elems = [];\r\n            for (let k = 0; k < 9; k += 1) {\r\n                elems.push(<td key={`${3*i + j}${k}`} id={`${3*i + j}${k}`}/>);\r\n            }\r\n            return elems;\r\n        }\r\n        for (let j = 0; j < 3; j += 1) {\r\n            rows.push(<tr key={`${3*i + j}row`}>{renderRow(i, j)}</tr>);\r\n        }\r\n        return rows;\r\n    }\r\n    for (let i = 0; i < 3; i += 1) {\r\n        grid.push(\r\n            <tbody key={`${i}threeRows`}>\r\n                {renderThreeRows(i)}\r\n            </tbody>\r\n        )\r\n    }\r\n    return grid;\r\n}\r\n\r\nconst renderSudoku = () => {\r\n    return (\r\n        <div>\r\n            <table>\r\n                <colgroup>\r\n                    <col span=\"3\"/>\r\n                </colgroup>\r\n                <colgroup>\r\n                    <col span=\"3\"/>\r\n                </colgroup>\r\n                <colgroup>\r\n                    <col span=\"3\"/>\r\n                </colgroup>\r\n                {renderGrid()}\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default renderSudoku;","const renderPuzzle = (puzzle, creationTime) => {\r\n    let numberOfClues = 0;\r\n    for (let i = 0; i < 9; i += 1) {\r\n        for (let j = 0; j < 9; j += 1) {\r\n            const cell = document.getElementById(`${i}${j}`);\r\n            if (Boolean(puzzle[i][j])) {\r\n                cell.innerText = puzzle[i][j];\r\n                numberOfClues += 1;\r\n            } else {\r\n                cell.innerText = '';\r\n            }\r\n        }\r\n    }\r\n    const timeElement = document.getElementById('creationTime');\r\n    timeElement.innerText = `Creation time: ${creationTime} ms`;\r\n    const numberOfCluesElement = document.getElementById('numberOfClues');\r\n    numberOfCluesElement.innerText = `Number of clues: ${numberOfClues}`;\r\n}\r\n\r\nexport default renderPuzzle;","// do not try to find out how any of this works, I beg you\r\n\r\nconst createSudoku = () => {\r\n    let t0 = Date.now();\r\n    let [x, y, sol] = createPuzzle();\r\n    let t1 = Date.now();\r\n    let puzzle = rewriteToGrid(sol);\r\n    return [puzzle, t1 - t0];\r\n}\r\n\r\nconst bigMatrix = () => {\r\n    let a = [];\r\n    for (let i = 0; i < 729; i++) {\r\n        a[i] = new Array(324).fill(0);\r\n        a[i][Math.floor(i/9)] = 1;\r\n        a[i][81 + 9*(Math.floor(i/81)) + i%9] = 1;\r\n        a[i][162 + i%81] = 1;\r\n        a[i][243 + i%9 + 9*Math.floor((i%81)/27) + 27*Math.floor(i/243)] = 1;\r\n    }\r\n    return a;\r\n}\r\n\r\nconst select = (x, y, r) => {\r\n    let cols = [];\r\n    y[r].forEach(i => {\r\n        x[i].forEach(j => {\r\n            y[j].forEach(k => {\r\n                if (k != i) {\r\n                    let c = x[k].indexOf(j);\r\n                    if (c >= 0) {\r\n                        x[k].splice(c, 1);\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        cols.push(x[i]);\r\n        delete x[i];\r\n    });\r\n    return cols;\r\n}\r\n\r\nconst deselect = (x, y, r, cols) => {\r\n    y[r].reverse().forEach(i => {\r\n        x[i] = cols.pop();\r\n        x[i].forEach(j => {\r\n            y[j].forEach(k => {\r\n                if (k !== i) {\r\n                    x[k].push(j);\r\n                }\r\n            })\r\n        })\r\n    })\r\n    y[r].reverse();\r\n}\r\n\r\nconst solve = (x, y, solution=[], firstTime=true) => {\r\n    if (firstTime) {\r\n        solve.riesenia = [];\r\n        solve(x, y, solution, false);\r\n        return solve.riesenia;\r\n    }\r\n    if (solve.riesenia.length > 1) {\r\n        return;\r\n    }\r\n    if(Object.keys(x).length === 0) {\r\n        let a = []\r\n        for (let i = 0; i < solution.length; i++) {\r\n            a.push(solution[i]);\r\n        }\r\n        solve.riesenia.push(a);\r\n\r\n    } else {\r\n        let c = Object.keys(x).reduce((a, b) => x[a].length > x[b].length ? b : a);\r\n        x[c].forEach(r => {\r\n            solution.push(r);\r\n            let cols = select(x, y, r);\r\n            solve(x, y, solution, false);\r\n            deselect(x, y, r, cols);\r\n            solution.pop();\r\n        })\r\n    }\r\n}\r\n\r\nconst exact_cover = (x, y) => {\r\n    let b = {};\r\n    x.forEach(e => b[e] = []);\r\n    for (let k in y) {\r\n        y[k].forEach(j => {\r\n            b[j].push(k);\r\n        })\r\n    }\r\n    return [b, y];\r\n}\r\n\r\nconst rewriteToObject = (matrix) => {\r\n    const r = matrix.length;\r\n    const s = matrix[0].length;\r\n    let y = {};\r\n    for (let i = 0; i < r; i++) {\r\n        y[i] = [];\r\n        for (let j = 0; j < s; j++) {\r\n            if (matrix[i][j] === 1) {\r\n                y[i].push(j);\r\n            }\r\n        }\r\n    }\r\n    return y;\r\n}\r\n\r\nconst prepare = (sudoku) => {\r\n    let a = [...Array(324).keys()];\r\n    let b = rewriteToObject(bigMatrix());\r\n    [a, b] = exact_cover(a, b);\r\n    let cols = [];\r\n    for (let i = 0; i < sudoku.length; i++) {\r\n        if (sudoku[i] !== '0') {\r\n            let c = 9*i + Number(sudoku[i]) - 1;\r\n            cols.push(c);\r\n            b[c].forEach(j => {\r\n                a[j].forEach(k => {\r\n                    b[k].forEach(l => {\r\n                        if (l != j) {\r\n                            let d = a[l].indexOf(k);\r\n                            if (d >= 0) {\r\n                                a[l].splice(d, 1);\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n                delete a[j];\r\n            });\r\n        }\r\n    }\r\n    return [a, b, cols];\r\n}\r\n\r\nconst rewriteToGrid = (sol) => {\r\n    let a = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        a[i] = new Array(9).fill(0);\r\n    }\r\n    for (let j = 0; j < sol.length; j++) {\r\n        let u = Number(sol[j]);\r\n        a[Math.floor(Math.floor(u/9)/9)][Math.floor(u/9)%9] = u%9 + 1;\r\n    }\r\n    return a;\r\n}\r\n\r\nconst pushClues = (numOfClues, a, b, solution = [], remainingRows = [...Array(729).keys()]) => {\r\n    for (let i = 0; i < numOfClues; i++) {\r\n        let c = Math.floor(Math.random() * remainingRows.length);\r\n        let m = remainingRows[c];\r\n        solution.push(m);\r\n        remainingRows.splice(c, 1);\r\n        b[m].forEach(j => {\r\n            a[j].forEach(k => {\r\n                b[k].forEach(l => {\r\n                    if (l != j) {\r\n                        let d = a[l].indexOf(k);\r\n                        if (d >= 0) {\r\n                            a[l].splice(d, 1);\r\n                        }\r\n                        d = remainingRows.indexOf(Number(k));\r\n                        if (d >= 0) {\r\n                            remainingRows.splice(d, 1);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            delete a[j];\r\n        });\r\n    }\r\n    return [a, b, solution, remainingRows];\r\n}\r\n\r\nconst createPuzzle = () => {\r\n    let solutions = [];\r\n    let remRows = [...Array(729).keys()];\r\n    let sol = [];\r\n    let x = [...Array(324).keys()];\r\n    let y = rewriteToObject(bigMatrix());\r\n    [x, y] = exact_cover(x, y);\r\n    let X, Y, S, R;\r\n    while (solutions.length !== 1) {\r\n        if (solutions.length > 1 || sol.length === 0) {\r\n            let c;\r\n            switch(Math.floor(sol.length / 8)) {\r\n                case 0: c = 7; break;\r\n                case 1: c = 5; break;\r\n                case 2: c = 3; break;\r\n                default: c = 2;\r\n            }\r\n            X = JSON.parse(JSON.stringify(x));\r\n            Y = JSON.parse(JSON.stringify(y));\r\n            S = sol.slice();\r\n            R = remRows.slice();\r\n            [x, y, sol, remRows] = pushClues(c, x, y, sol, remRows);\r\n        } else {\r\n            x = JSON.parse(JSON.stringify(X));\r\n            y = JSON.parse(JSON.stringify(Y));\r\n            sol = S.slice();\r\n            remRows = R.slice();\r\n            [x, y, sol, remRows] = pushClues(1, x, y, sol, remRows);\r\n        }\r\n        solutions = solve(x, y, sol);\r\n    }\r\n    return [x, y, sol];\r\n}\r\n\r\n// TODO: make minimalize function faster .. current time cca. 100 ms\r\nconst minimalize = (sol) => {\r\n    sol.forEach(e => {\r\n        let x = [...Array(324).keys()];\r\n        let y = rewriteToObject(bigMatrix());\r\n        [x, y] = exact_cover(x, y);\r\n        let solution = sol.slice();\r\n        solution.splice(solution.indexOf(e), 1);\r\n        solution.forEach(m => {\r\n            y[m].forEach(j => {\r\n                x[j].forEach(k => {\r\n                    y[k].forEach(l => {\r\n                        if (l != j) {\r\n                            let d = x[l].indexOf(k);\r\n                            if (d >= 0) {\r\n                                x[l].splice(d, 1);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n                delete x[j];\r\n            });\r\n        })\r\n        let sls = solve(x, y, solution);\r\n        if (sls.length === 1) {\r\n            sol.splice(sol.indexOf(e), 1);\r\n        }\r\n    })\r\n    return sol;\r\n}\r\n\r\nexport default createSudoku;","const configuration = {\r\n    apiUrl: process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://rocky-headland-25890.herokuapp.com',\r\n}\r\n\r\nexport default configuration;","import React from 'react';\r\nimport './style.css';\r\nimport renderTable from './helpers/render/render-table';\r\nimport renderPuzzle from './helpers/render/render-puzzle';\r\nimport createSudoku from './helpers/create-sudoku';\r\nimport config from '../../config';\r\n\r\nconst Sudoku = () => {\r\n    const handleSudoku = async () => {\r\n        const [puzzle, creationTime] = createSudoku();\r\n        renderPuzzle(puzzle, creationTime);\r\n        fetch(`${config.apiUrl}/post-sudoku`, {\r\n            method: 'POST',\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n              }),\r\n            body: JSON.stringify({\r\n                puzzle,\r\n                creationTime,\r\n            }),\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            {renderTable()}\r\n            <button onClick={handleSudoku}>\r\n                Create\r\n            </button>\r\n            <p id=\"creationTime\">\r\n                Creation time:\r\n            </p>\r\n            <p id=\"numberOfClues\">\r\n                Number of clues:\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sudoku;","import React from 'react';\r\n\r\nconst Database = () => {\r\n    return (\r\n        <div>\r\n            Database component will render here\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Database;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            About page renders here\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { readDatabase } from '../../store/actions';\r\n\r\nclass SudokuList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.readSudokus();\r\n    }\r\n\r\n    renderPuzzles(sudokus) {\r\n        const puzzles = []\r\n        for(let sudoku of sudokus) {\r\n            puzzles.push(\r\n                <p key={sudoku.id}>{sudoku.puzzle}</p>\r\n            )\r\n        }\r\n        return puzzles;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Sudoku List\r\n                {this.renderPuzzles(this.props.sudokus)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    sudokus: state.sudokus,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    readSudokus: () => dispatch(readDatabase()),\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(SudokuList);","import config from '../../config';\r\n\r\nexport const readDatabase = () => {\r\n    return (dispatch) => {\r\n        fetch(`${config.apiUrl}/api/database`, {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                dispatch({\r\n                    type: 'LOAD_SUDOKUS',\r\n                    data: json,\r\n                })\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                dispatch({\r\n                    type: 'LOAD_SUDOKUS_ERROR',\r\n                });\r\n            })\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Sudoku from './components/Sudoku';\nimport Database from './components/Database';\nimport About from './components/About';\nimport SudokuList from './components/SudokuList';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Route path='/' exact component={Sudoku} />\n          <Route path='/about' component={About} />\n          <Route path='/database' component={Database} />\n          <Route path='/list' component={SudokuList} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nconst sudokus = (state=[], action) => {\r\n    if (action.type === 'LOAD_SUDOKUS') {\r\n        return action.data ? action.data.sudokus : [];\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default combineReducers({\r\n    sudokus,\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    applyMiddleware(\r\n        thunkMiddleware,\r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}